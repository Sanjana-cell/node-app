pipeline {
    agent { label 'chat-app-agent' }
    stages {
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('sonarqube-server') { // If you have configured more than one global server connection, you can specify its name
                    sh "/opt/sonar-scanner-4.4.0.2170-linux/bin/sonar-scanner"
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage("deploy") {
            steps{
                step([$class: 'AWSCodeDeployPublisher',
                      applicationName: 'node-app', awsAccessKey: '',
                      awsSecretKey: '',
                      credentials: 'awsAccessKey', deploymentConfig: 'CodeDeployDefault.OneAtATime',
                      deploymentGroupAppspec: false, deploymentGroupName: 'demo-2', deploymentMethod: 'deploy',
                      excludes: '', iamRoleArn: '', includes: '**', proxyHost: '', proxyPort: 0, region: 'us-east-2',
                      s3bucket: 'demo24123', s3prefix: '', subdirectory: '', versionFileName: '', waitForCompletion: true])
            }}

    }
}
